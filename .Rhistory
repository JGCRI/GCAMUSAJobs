replace_naselect(subsector, technology) %>%
replace_nadistinct() %>%
as_tibble() %>%
left_join_error_no_match(A23.elec_tech_coal_retire_SCurve %>% select(-Electric.sector),
by = c("subsector" = "Electric.sector.technology")) %>%
replace_namutate(shutdown.rate = NA,
median.shutdown.point = NA,
profit.shutdown.steepness = NA) %>%
repeat_add_columns(tibble::tibble(year = c("final-calibration-year", "initial-future-year")) ) %>%
select(names(s_curve_shutdown_global))
s_curve_shutdown_coal <- elec_capital %>%
# first create a mapping file for coal vintage technologies
dplyr::filter(subsector %in% A23.elec_tech_coal_retire_SCurve$Electric.sector.technology) %>%
dplyr::select(subsector, technology) %>%
dplyr::distinct() %>%
as_tibble() %>%
left_join_error_no_match(A23.elec_tech_coal_retire_SCurve %>% select(-Electric.sector),
by = c("subsector" = "Electric.sector.technology")) %>%
dplyr::mutate(shutdown.rate = NA,
median.shutdown.point = NA,
profit.shutdown.steepness = NA) %>%
repeat_add_columns(tibble::tibble(year = c("final-calibration-year", "initial-future-year")) ) %>%
dplyr::select(names(s_curve_shutdown_global))
s_curve_shutdown_coal <- elec_capital %>%
# first create a mapping file for coal vintage technologies
dplyr::filter(subsector %in% A23.elec_tech_coal_retire_SCurve$Electric.sector.technology) %>%
dplyr::select(subsector, technology) %>%
dplyr::distinct() %>%
dplyr::as_tibble() %>%
left_join_error_no_match(A23.elec_tech_coal_retire_SCurve %>% select(-Electric.sector),
by = c("subsector" = "Electric.sector.technology")) %>%
dplyr::mutate(shutdown.rate = NA,
median.shutdown.point = NA,
profit.shutdown.steepness = NA) %>%
repeat_add_columns(tibble::tibble(year = c("final-calibration-year", "initial-future-year")) ) %>%
dplyr::select(names(s_curve_shutdown_global))
s_curve_shutdown_coal <- elec_capital %>%
# first create a mapping file for coal vintage technologies
dplyr::filter(subsector %in% A23.elec_tech_coal_retire_SCurve$Electric.sector.technology) %>%
dplyr::select(subsector, technology) %>%
dplyr::distinct() %>%
dplyr::as_tibble() %>%
left_join_error_no_match(A23.elec_tech_coal_retire_SCurve %>% dplyr::select(-Electric.sector),
by = c("subsector" = "Electric.sector.technology")) %>%
dplyr::mutate(shutdown.rate = NA,
median.shutdown.point = NA,
profit.shutdown.steepness = NA) %>%
repeat_add_columns(tibble::tibble(year = c("final-calibration-year", "initial-future-year")) ) %>%
dplyr::select(names(s_curve_shutdown_global))
s_curve_shutdown <- s_curve_shutdown_global %>%
dplyr::filter(!subsector %in% unique(s_curve_shutdown_coal$subsector)) %>%
dplyr::bind_rows(s_curve_shutdown_coal) %>%
dplyr::distinct()
# copy to all states, then adjust nuclear S-curve by states
s_curve_shutdown_states <- s_curve_shutdown %>%
repeat_add_columns(tibble::tibble(region = gcamdata:::gcamusa.STATES)) %>%
# update nuclear state-level assumptions
dplyr::left_join(L2244.StubTechSCurve_nuc_gen2_USA, by = c("region", "subsector")) %>%
dplyr::mutate(lifetime = ifelse(is.na(lifetime.y), lifetime.x, lifetime.y),
steepness = ifelse(is.na(steepness.y), steepness.x, steepness.y),
half.life = ifelse(is.na(half.life.y), half.life.x, half.life.y)) %>%
dplyr::select(region, names(s_curve_shutdown))
usethis::use_package("gcamdata")
gcamusa.STATES <- c("AK", "AL", "AR", "AZ", "CA", "CO", "CT", "DC", "DE", "FL", "GA", "HI",
"IA", "ID", "IL", "IN", "KS", "KY", "LA", "MA", "MD", "ME", "MI", "MN",
"MO", "MS", "MT", "NC", "ND", "NE", "NH", "NJ", "NM", "NV", "NY", "OH",
"OK", "OR", "PA", "RI", "SC", "SD", "TN", "TX", "UT", "VA", "VT", "WA",
"WI", "WV", "WY")
gcamusa.STATES
# copy to all states, then adjust nuclear S-curve by states
s_curve_shutdown_states <- s_curve_shutdown %>%
repeat_add_columns(tibble::tibble(region = gcamusa.STATES)) %>%
# update nuclear state-level assumptions
dplyr::left_join(L2244.StubTechSCurve_nuc_gen2_USA, by = c("region", "subsector")) %>%
dplyr::mutate(lifetime = ifelse(is.na(lifetime.y), lifetime.x, lifetime.y),
steepness = ifelse(is.na(steepness.y), steepness.x, steepness.y),
half.life = ifelse(is.na(half.life.y), half.life.x, half.life.y)) %>%
dplyr::select(region, names(s_curve_shutdown))
head(s_curve_shutdown_states)
# O&M cost share: fixed vs var
L113.globaltech_OMvar_ATB <- read.GCAM.csv("L113.globaltech_OMvar_ATB") %>% dplyr::rename(OM = input.OM.var)
L113.globaltech_OMfixed_ATB <- read.GCAM.csv("L113.globaltech_OMfixed_ATB") %>% dplyr::rename(OM = input.OM.fixed)
L113.globaltech_OMvar_ATB %>%
dplyr::bind_rows(L113.globaltech_OMfixed_ATB) %>%
dplyr::select(supplysector, subsector, technology, OM, value = X2015) %>%
tidyr::spread(OM, value) %>%
dplyr::mutate(fixed = `OM-fixed`/(`OM-fixed` +`OM-var`),
variable = `OM-var`/(`OM-fixed` +`OM-var`)) %>%
#TODO: group by technology
dplyr::group_by(fuel = subsector) %>%
dplyr::summarise(fixed = mean(fixed),
variable = mean(variable)) ->
OM_share
library(usethis)
use_data(OM_share, overwrite = TRUE)
use_data(s_curve_shutdown_states, overwrite = TRUE)
use_data(hydro_cf, overwrite = TRUE)
# load GCAM-USA project data
#TODO: write a function to load from GCAM-USA output
prj <- rgcam::loadProject('capacity1.dat')
# load GCAM-USA project data
#TODO: write a function to load from GCAM-USA output
prj <- rgcam::loadProject('capacity1.dat')
View(prj)
# load GCAM-USA project data
#TODO: write a function to load from GCAM-USA output
dat_file_path <- system.file("extdata", "capacity1.dat", package = "GOFREE")
prj <- rgcam::loadProject(dat_file_path)
dat_file_path
# load GCAM-USA project data
#TODO: write a function to load from GCAM-USA output
dat_file_path <- system.file("extdata", "capacity1.dat", package = "GOFREE")
dat_file_path
# load GCAM-USA project data
#TODO: write a function to load from GCAM-USA output
prj <- rgcam::loadProject('C:/GODEEP/capacity1.dat')
geo_cf
gcamusa.STATES
GOFREE::gcamusa.STATES
YEAR_RANGE
usethis::use_r("constant")
gcamusa.STATES
devtools::document()
usethis::use_data(OM_cost, overwrite = TRUE)
usethis::use_data(OM_cost.rda, overwrite = TRUE)
usethis::use_data(data/OM_cost.rda, overwrite = TRUE)
load(OM_cost.rda)
load(data/OM_cost.rda)
load("C:/GODEEPPackage/GOFREE/data/OM_cost.rda")
usethis::use_data(OM_cost, overwrite = TRUE)
unlink("data/OM_share.rda")
devtools::document()
renv::status()
?renv::status()
renv::snapshot()
renv::status()
GOFREE::OM_cost
a <- GOFREE::OM_cost
colnames(a)
dim(a)
load("C:/GODEEP/mapUS52Compact.rda")
usethis::use_data(mapUS52Compact)
data(mapUS52Compact)
force(mapUS52Compact)
View(mapUS52Compact)
head(mapUS52Compact)
class(mapUS52Compact)
dim(mapUS52Compact)
colnames(mapUS52Compact)
head(mapUS52Compact)
colnames(mapUS52Compact)
head(mapUS52Compact[,1:6])
load("C:/GODEEP/SCurve.rda")
usethis::use_data(SCurve)
unlink("data/s_curve_shutdown_states.rda")
head(SCurve)
dim(SCurve)
unique(SCurve$vintage)
devtools::document()
devtools::document()
devtools::document()
devtools::document()
devtools::document()
devtools::document()
GOFREE::CONV_EJ_KWH
GOFREE::geo_cf
GOFREE::hydro_cf
CONV_EJ_KWH <- 277777777777.78
convGW_MW <- 1e3
convMW_kW <- 1e3
convGW_kW <- 1e6
convEJ2TWh<-277.77777777778
convEJ2GW<-convEJ2TWh*1000/8760
convEJ2GWh <- 277777.778
GCAM_model_step <- 5
MODEL_FINAL_BaseYear <- 2015
# capacity factor ----
geo_cf <- 0.76
# years mapping ----
years_mapping <- data.frame(year = c(rep("final-calibration-year", 1),
rep("initial-future-year",
length(seq(2020, 2100, by = 5)))),
vintage = c(seq(2015, 2100, by = 5))) %>%
dplyr::mutate(year = as.character(year))
gcamusa.STATES <- c("AK", "AL", "AR", "AZ", "CA", "CO", "CT", "DC", "DE", "FL", "GA", "HI",
"IA", "ID", "IL", "IN", "KS", "KY", "LA", "MA", "MD", "ME", "MI", "MN",
"MO", "MS", "MT", "NC", "ND", "NE", "NH", "NJ", "NM", "NV", "NY", "OH",
"OK", "OR", "PA", "RI", "SC", "SD", "TN", "TX", "UT", "VA", "VT", "WA",
"WI", "WV", "WY")
usethis::use_data(CONV_EJ_KWH)
usethis::use_data(convGW_MW)
usethis::use_data(convMW_kW)
usethis::use_data(GCAM_model_step)
usethis::use_data(geo_cf)
usethis::use_data(years_mapping)
usethis::use_data(gcamusa.STATES)
devtools::document()
GOFREE::convGW_MW
GOFREE::years_mapping
ReadGCAM <- function(filetype,
input_path, # full path of the input file (db or .dat)
db_name, # name of the db folder
query = system.file("extdata", "my_batch.xml", package = "GOFREE"),
scen_name, # name of the scenario of interest
prj_name){ # name of a prj
if(!filetype %in% c("db", "prj")){
print("Need a GCAM output databse: 'db' or an existing prj: 'dat'; Current input is not a valid input type")
} else{
if(filetype == "db"){ # if read from a GCAM output db
if(is.null(input_path)){
print("miss the path of GCAM output DB")} else{
if(is.null(db_name)){
print("miss db name")} else{
if(is.null(scen_name)){
print("miss the scenario name")} else{
if(is.null(prj_name)) {
print("miss the prj name")} else{
# Load the rgcam project:
conn <- rgcam::localDBConn(input_path, db_name, migabble = TRUE)
prj <- rgcam::addScenario(conn,prj_name,scen_name,query)}
}
}
}
} else{ # read from an existing prj
if(is.null(prj_name)){
print("missing a prj name")
} else{
prj <- rgcam::loadProject(prj_name)}
}
}
# # Ancillary Functions
# `%!in%` = Negate(`%in%`)
return(prj)
}
check <- system.file("extdata", "my_batch.xml", package = "GOFREE")
check
devtools::document()
devtools::document()
devtools::load_all(".")
devtools::document()
rm(list = c("ReadGCAM"))
devtools::document()
devtools::document
devtools::document()
load("C:/GODEEP/EF.JEDI.rda")
usethis::use_data(EF.JEDI)
install.packages("ggplot2", dependencies = FALSE)
renv::status()
renv::snapshot()
R.version.string
install.packages("sf", dependencies = FALSE)
renv::status()
renv::snapshot()
theme0 <- theme(
panel.border = element_rect(colour = "black", linewidth =1),
text = element_text(family= "Arial", size = 15),
axis.text.y = element_text(angle = 0, color = "black", size = 15, margin = margin(r = 10)),
axis.text.x = element_text(angle = 0, color = "black", size = 15, margin = margin(t = 10), vjust= 0.5),
axis.title.y = element_text(size = 15, margin = margin(t = 0, r = 10, b = 0, l = 0)),
axis.title.x = element_text(size = 15, margin = margin(t = 10, r = 0, b = 0, l = 0)),
axis.text.x.top =  element_blank(),  axis.title.x.top = element_blank(),
strip.background = element_rect(fill="grey95"),
strip.text = element_text(size = 16),
plot.title = element_text(hjust = 0, face = "bold"),
plot.margin = margin(t = 10, r = 15, b = 10, l = 10) #panel.spacing = unit(1, "lines"),
)
theme0 <- ggplot2::theme(
panel.border = element_rect(colour = "black", linewidth =1),
text = element_text(family= "Arial", size = 15),
axis.text.y = element_text(angle = 0, color = "black", size = 15, margin = margin(r = 10)),
axis.text.x = element_text(angle = 0, color = "black", size = 15, margin = margin(t = 10), vjust= 0.5),
axis.title.y = element_text(size = 15, margin = margin(t = 0, r = 10, b = 0, l = 0)),
axis.title.x = element_text(size = 15, margin = margin(t = 10, r = 0, b = 0, l = 0)),
axis.text.x.top =  element_blank(),  axis.title.x.top = element_blank(),
strip.background = element_rect(fill="grey95"),
strip.text = element_text(size = 16),
plot.title = element_text(hjust = 0, face = "bold"),
plot.margin = margin(t = 10, r = 15, b = 10, l = 10) #panel.spacing = unit(1, "lines"),
)
theme0 <- ggplot2::theme(
panel.border = ggplot2::element_rect(colour = "black", linewidth =1),
text = ggplot2::element_text(family= "Arial", size = 15),
axis.text.y = ggplot2::element_text(angle = 0, color = "black", size = 15, margin = margin(r = 10)),
axis.text.x = ggplot2::element_text(angle = 0, color = "black", size = 15, margin = margin(t = 10), vjust= 0.5),
axis.title.y = ggplot2::element_text(size = 15, margin = margin(t = 0, r = 10, b = 0, l = 0)),
axis.title.x = ggplot2::element_text(size = 15, margin = margin(t = 10, r = 0, b = 0, l = 0)),
axis.text.x.top =  ggplot2::element_blank(),  axis.title.x.top = element_blank(),
strip.background = ggplot2::element_rect(fill="grey95"),
strip.text = ggplot2::element_text(size = 16),
plot.title = ggplot2::element_text(hjust = 0, face = "bold"),
plot.margin = ggplot2::margin(t = 10, r = 15, b = 10, l = 10) #panel.spacing = unit(1, "lines"),
)
theme0 <- ggplot2::theme(
panel.border = ggplot2::element_rect(colour = "black", linewidth =1),
text = ggplot2::element_text(family= "Arial", size = 15),
axis.text.y = ggplot2::element_text(angle = 0, color = "black", size = 15, margin = margin(r = 10)),
axis.text.x = ggplot2::element_text(angle = 0, color = "black", size = 15, margin = margin(t = 10), vjust= 0.5),
axis.title.y = ggplot2::element_text(size = 15, margin = ggplot2::margin(t = 0, r = 10, b = 0, l = 0)),
axis.title.x = ggplot2::element_text(size = 15, margin = ggplot2::margin(t = 10, r = 0, b = 0, l = 0)),
axis.text.x.top =  ggplot2::element_blank(),  axis.title.x.top = ggplot2::element_blank(),
strip.background = ggplot2::element_rect(fill="grey95"),
strip.text = ggplot2::element_text(size = 16),
plot.title = ggplot2::element_text(hjust = 0, face = "bold"),
plot.margin = ggplot2::margin(t = 10, r = 15, b = 10, l = 10) #panel.spacing = unit(1, "lines"),
)
theme0 <- ggplot2::theme(
panel.border = ggplot2::element_rect(colour = "black", linewidth =1),
text = ggplot2::element_text(family= "Arial", size = 15),
axis.text.y = ggplot2::element_text(angle = 0, color = "black", size = 15, margin = ggplot2::margin(r = 10)),
axis.text.x = ggplot2::element_text(angle = 0, color = "black", size = 15, margin = ggplot2::margin(t = 10), vjust= 0.5),
axis.title.y = ggplot2::element_text(size = 15, margin = ggplot2::margin(t = 0, r = 10, b = 0, l = 0)),
axis.title.x = ggplot2::element_text(size = 15, margin = ggplot2::margin(t = 10, r = 0, b = 0, l = 0)),
axis.text.x.top =  ggplot2::element_blank(),  axis.title.x.top = ggplot2::element_blank(),
strip.background = ggplot2::element_rect(fill="grey95"),
strip.text = ggplot2::element_text(size = 16),
plot.title = ggplot2::element_text(hjust = 0, face = "bold"),
plot.margin = ggplot2::margin(t = 10, r = 15, b = 10, l = 10) #panel.spacing = unit(1, "lines"),
)
theme1 <- ggplot2::theme(axis.text.x = ggplot2::element_text(angle = 40, hjust = 0.9, vjust = 1),
legend.text = ggplot2::element_text(hjust = 0),
strip.background = ggplot2::element_rect(fill="grey99"),
strip.text = ggplot2::element_text(size = 12),
axis.text.x.bottom = ggplot2::element_text(size = 12),
axis.text.y = ggplot2::element_text(size = 12),
panel.grid.minor = ggplot2::element_blank(),
panel.grid.major = ggplot2::element_line(linetype = 2, color = "grey80", linewidth = 0.3),
panel.spacing.y = ggplot2::unit(0.5, "lines"),
panel.spacing.x = ggplot2::unit(0.5, "lines"))
colors <- c("OM_fixed" = "#1f78b4", "OM_var" = "#a6cee3",  # Group 1 colors (blue shades)
"Construction-onsite" = "#33a02c", "Construction-related" = "#b2df8a",  # Group 2 colors (green shades)
"Decommission" = "#e31a1c")
usethis::use_data(theme0)
usethis::use_data(theme1)
usethis::use_data(theme_leg)
theme_leg <- ggplot2::theme(legend.position="right", legend.justification = "center",
legend.key.size = ggplot2::unit(1.5, "cm"),
legend.key.height = ggplot2::unit(1.5,"line"),
legend.spacing.x = ggplot2::unit(1, 'cm'), #legend.spacing.y = unit(5, 'cm'),
legend.text = element_text(margin = ggplot2::margin(l = -25,t=0, b=0), size = 15),
legend.box.margin = ggplot2::margin(-10, 10,-8,10),
legend.background = ggplot2::element_blank())
theme_leg <- ggplot2::theme(legend.position="right", legend.justification = "center",
legend.key.size = ggplot2::unit(1.5, "cm"),
legend.key.height = ggplot2::unit(1.5,"line"),
legend.spacing.x = ggplot2::unit(1, 'cm'), #legend.spacing.y = unit(5, 'cm'),
legend.text = ggplot2::element_text(margin = ggplot2::margin(l = -25,t=0, b=0), size = 15),
legend.box.margin = ggplot2::margin(-10, 10,-8,10),
legend.background = ggplot2::element_blank())
usethis::use_data(theme_leg)
usethis::use_data(colors)
devtools::document()
devtools::document()
getwd()
prj <- ReadGCAM(filetype = 'db',
input_path = "C:/GODEEP/GCAM7/output/",
db_name = "database_basexdbGCAM-USA_Ref",
query = 'my_batch.xml', # TODO: make sure rgcam work with package defualt query info
scen_name = "GCAM-USA_Ref",
prj_name = "package.dat")
prj <- ReadGCAM(filetype = 'db',
input_path = "C:/GODEEP/GCAM7/output/",
db_name = "database_basexdbGCAM-USA_Ref",
scen_name = "GCAM-USA_Ref",
prj_name = "package.dat")
prj <- ReadGCAM(filetype = 'prj',
input_path = "C:/GODEEP",
prj_name = "package.dat")
EJ_activity <- GCAM_EJ(prj) # 20s
devtools::document()
prj <- ReadGCAM(filetype = 'prj',
input_path = "C:/GODEEP",
prj_name = "package.dat")
EJ_activity <- GCAM_EJ(prj)
EJ_activity <- GCAM_EJ(prj)
EJ_activity <- GCAM_EJ(prj)
EJ_activity <- GCAM_EJ(prj)
GW_activity <- GCAM_GW(EJ_activity)
head(EJ_activity)
cap_fac_join <- rgcam::getQuery(prj, 'GCAM_USA elec cap-fac by cooling tech') %>%
dplyr::select(scenario, region, year, sector, subsector = subsector...5,
subsector.1 = subsector...6, technology, value) %>%
dplyr::mutate(fuel = subsector,
fuel = ifelse(grepl("offshore", subsector.1), "wind_offshore", fuel),
subsector = gsub(",depth=1", "", subsector.1),
technology = gsub(" ", "", technology),
fuel = ifelse(grepl("CSP", subsector), "CSP", fuel), # separate CSP and PV from solar
fuel = ifelse(grepl("PV", subsector), "PV", fuel))
elec_gen_activity %>%
dplyr::filter(grepl("hydro", subsector)) %>%
dplyr::mutate(technology = gsub(" ", "", technology)) %>%
dplyr::left_join(hydro_cf %>% dplyr::rename(capacity.factor = value), by = "region") %>%
dplyr::mutate(value = (value / gcamdata:::CONV_GWH_EJ) / (8760 * capacity.factor), # EJ to GW
Units = "GW",
fuel = ifelse(grepl("CCS", technology), paste0(fuel, "_CCS"), fuel)) ->
tech_GW_hydro
elec_gen_activity = EJ_activity
elec_gen_activity %>%
dplyr::filter(grepl("hydro", subsector)) %>%
dplyr::mutate(technology = gsub(" ", "", technology)) %>%
dplyr::left_join(hydro_cf %>% dplyr::rename(capacity.factor = value), by = "region") %>%
dplyr::mutate(value = (value / gcamdata:::CONV_GWH_EJ) / (8760 * capacity.factor), # EJ to GW
Units = "GW",
fuel = ifelse(grepl("CCS", technology), paste0(fuel, "_CCS"), fuel)) ->
tech_GW_hydro
head(hydro_cf)
unlink("data/hydro_cf.rda")
load("C:/GODEEP/hydro_cf.rda")
usethis::use_data(hydro_cf)
prj <- ReadGCAM(filetype = 'prj',
input_path = "C:/GODEEP",
prj_name = "package.dat")
EJ_activity <- GCAM_EJ(prj)
GW_activity <- GCAM_GW(EJ_activity)
3.6e-06
1/277777777777.78
CONV_GWH_EJ <- 3.6e-06
usethis::use_data(CONV_GWH_EJ)
devtools::document()
GW_activity <- GCAM_GW(EJ_activity)
GW_activity <- GCAM_GW(EJ_activity)
JOB_activity <- GCAM_JOB(GW_activity, "Net")
JOB_activity <- GCAM_JOB(GW_activity, "Net")
JOB_activity <- GCAM_JOB(GW_activity, "Net")
JOB_activity <- GCAM_JOB(GW_activity, "net")
JOB_activity <- GCAM_JOB(GW_activity, "net")
JOB_activity <- GCAM_JOB(GW_activity, "net")
JOB_activity <- GCAM_JOB(GW_activity, "Net")
PLOT_EF()
PLOT_EF()
PLOT_EF()
PLOT_EF()
View(JOB_activity)
check <- GOFREE::EF.JEDI
View(check)
summary(check)
warnings()
PLOT_GW(GW_activity, "Net")
PLOT_JOB(JOB_activity)
PLOT_JOB_TYPE(JOB_activity)
MAP_JOB(JOB_activity, 2050)
JOB_activity %>%
dplyr::filter(Year == year) %>%
dplyr::group_by(scenario, region, Year, Units) %>%
dplyr::summarise(value = sum(value, na.rm = T), .groups = "drop") ->
job.state
year = 2050
JOB_activity %>%
dplyr::filter(Year == year) %>%
dplyr::group_by(scenario, region, Year, Units) %>%
dplyr::summarise(value = sum(value, na.rm = T), .groups = "drop") ->
job.state
GOFREE::mapUS52Compact %>%
dplyr::select(region = subRegion) %>%
dplyr::left_join(job.state, by = "region") %>%
dplyr::mutate(
value = value/1000,
bin = dplyr::case_when(
value <= 1 ~ "(0, 1k]",
value > 1 & value <= 5 ~ "(1k, 5k]",
value > 5 & value <= 10 ~ "(5k, 10k]",
value > 10 & value <= 25 ~ "(10k, 25k]",
value > 25 & value <= 50 ~ "(25k, 50k]",
value > 50 & value <= 75 ~ "(50k, 75k]",
value > 75 & value <= 100 ~ "(75k, 100k]",
value > 100 & value <= 200 ~ "(100k, 200k]",
value > 200 & value <= 300 ~ "(200k, 300k]",
value > 300 ~ "> 300k",
TRUE ~ NA_character_  # Handles cases where `value` might be NA or out of range
),
bin = factor(bin, levels = c("(0, 1k]", "(1k, 5k]", "(5k, 10k]", "(10k, 25k]",
"(25k, 50k]", "(50k, 75k]", "(75k, 100k]",
"(100k, 200k]", "(200k, 300k]", "> 300k"))) %>%
stats::na.omit() ->
df.map
# top and tail 5 states
df.map %>%
dplyr::arrange(desc(value)) %>%
dplyr::mutate(value = round(value,0)) %>%
utils::head(5) -> df.text.head
df.map %>%
dplyr::arrange(desc(value)) %>%
dplyr::mutate(value = round(value,0)) %>%
utils::tail(5) -> df.text.tail
df.map %>%
ggplot2::ggplot() +
ggplot2::geom_sf(ggplot2::aes(fill = bin)) + ggplot2::scale_fill_brewer(palette = "Blues")+
ggplot2::geom_sf_text(data = df.text.head, ggplot2::aes(label = paste0(region, ":\n", value)),  color = "yellow", size = 2) +
ggplot2::geom_sf_text(data = df.text.tail, ggplot2::aes(label = paste0(region, ":\n ", value)),  color = "black", size = 2) +
ggplot2::labs(x = "", y = "", fill = "People",
title = paste0("state-level power sector employment: ", year)) +
ggplot2::theme_bw() + GOFREE::theme0 + GOFREE::theme1
MAP_JOB(JOB_activity, 2050)
class(df.map)
summary(df.map)
df.map %>%
ggplot2::ggplot() +
ggplot2::geom_sf(ggplot2::aes(fill = bin)) + ggplot2::scale_fill_brewer(palette = "Blues")+
ggplot2::geom_sf_text(data = df.text.head, ggplot2::aes(label = paste0(region, ":\n", value)),  color = "yellow", size = 2) +
ggplot2::geom_sf_text(data = df.text.tail, ggplot2::aes(label = paste0(region, ":\n ", value)),  color = "black", size = 2) +
ggplot2::labs(x = "", y = "", fill = "People",
title = paste0("state-level power sector employment: ", year)) +
ggplot2::theme_bw() + GOFREE::theme0 + GOFREE::theme1
MAP_JOB(JOB_activity, 2050)
warnings()
`rlang::last_error()`
library(rlang)
`rlang::last_error()`
rlang::last_error()
head(df.map)
head(df.text.head)
head(df.map)
devtools::load_all(".")
